------------------------Week 1---------------------------

Software Operational or Behavior Specification is done before writing software to 
ensuring that the software is capturing right software specifications according to
the project requirements.

Flow Diagram ( Flow Chart ) and Block Diagrams provides us the above information.

Flow Diagram are : Algorithm Based , Shows Functional behaviors , Conditional Decisions and High Level Function Calls.

Software Block Diagram : As C files (.c) are module files so these diagrams show
how different functions interact with other modules , interact with hardware.

Software that directly interface with hardware is called Bare Metal.

Embedded C is a form of C Programming with it´s focus on : 

Efficient Memory Management
Timing Centric Operations.
Direct Hardware I/O Control.
Code Size Constraints
Optmized Execution.

In C the variable decalaration format is : 
type qualifier storage class data_type variable (By default storage class in C is auto for local variables)

Storage Class : Auto , Static , Register and Extern
Type Qualifiers : const , volatile and restrict.

C Programming Coding Guidelines : 
These are the rules that developers need to follow when coding for a specific domain or according to the requirments and to make code changes as they enable : 
Prevention Of Bugs.
Reduction Of Bad Practices.
Ensure Security, portability, reliability and safety of software.

Examples of Coding Standards : 
DO178C For Aviation.
MISRA C(Motor Industry Software Reliability Association).
ISO26262 For Automotive Systems and Software.

C Language Standards : C11 ( Most Recent Supporting Multithreading), C99,C89 e.t.c.

Chip Manufacturers provides us Errata sheet provides us information with the workaroud required as issues are not perfect.

The five necessary tools that are neccessary for embedded software development are : 

Compilers, Emulators, Simulators, Debuggers and Installers.

Embedded SW Should be : 
Maintainable, Testable, Portable, Robust, Efficient and Consistent.

----------------------------------------Week 2----------------------------- 

In GCC Compiler there are five steps of comiling a source code file : 
Preprocessor : Inserts Preprocessor and macro code.
Compiler : Produces Assembly file with 
Assembler : Producing Object Code.
Linker : For combining multiple object files from other source code files such as 
libraries into a one absolute object file.
Locator/Loader  : Assignin memory addresses of the targetted architecture in the binary file produced by Linker.

Output of Preprocessor is a file with .i extension
Output of Compiler     is a file with .s extension
Output of Assembler    is a file with .o extension 


*****************Creating Header and Implementation Files*****************

When we include a precompiled library into our source code then questions we 
need to aks to ourselves are : 

Is this library compiled for my architecture ? 
Was this library designed to be optimized for my architecture ?

If we have full library source code then i need to think : 
What software features does this use ?
What other code does this include ?

Many software engineer organizations rewrite the libraries source code available at open source platforms and other third parties specialized and optimzied according  to their platform.

We should not include any library arbitrarily but after vaidation and verification.

Static libraries as we already know are directly linked with our output executable i.e. part of our executable generated from our source code, they are also libraries pre compiled and available to us with our compiler toolchain.

Shared libraries are linked dynamically at run time with our executable code and are pre installed onto the target and our executable code is placed in separate regions than libraries.
These libraries are used with applications running an operating system. 
Sometimes embedded manufacturers provide us a dedicated memory for storing pre compiled shared libraries.

Header files are the interface to our libraries so we need to put function headers (description ,input param, return paramthers) enabling other programmers to use our libraries efficiently.


Every ARM architecture has a specifically compiled and optmized library so to compile a library using arm compiler we can do using -vflag and specifiy the architecture at compile time.



*************Linkers**************

Locator : Maps object file into specific address locations producing an executable program that can be installed on our target processor.

Linker file : Input file to the locator , informs the locator how to map our executable file i.e. object file produced by linker at proper addresses of target architecture.
              This linker file is linked with locator using -T option. 

Command Format 
gcc <other-options-here> -Xlinker -T Xlinker mk125z_lnk.d

The object files produced by assembler have different memory segments such as 
code memory, data memory . These object files use symbols to reference other
functions/variables. 


If we are using an embedded OS then we get by default libraries installed on our device so we can link them dynamically with our application at run time saving code space.

Standard libraries can be statically or dynamically linked.
Entry and exit points from main are included in a standard library that is automatically linked by linker.
We can stop auto link of standard libs with -nostdlib flag.

Linker Scripts Details : 

Code sections to memory regions map.
Start and Sizes of memory regions.
Accesses attributes of memory regions.
Report checking for over allocation.
Entry points of program.

During the process of linking our code is mapped into different memory regions.

Our program will be split into many memory regions and segments during installation.
These segments are physical parts of memory on our microcontroller.

Similarly our binary executable is also broken up into many sections of code and data and later these sections are mapped into different physical memory sections of targetted architecture.

Since different physical memory segments are going to be assigned to different addresses the linker needs to know where code memory should be assigned.

Also for the data that code uses, exact addresses of that data need to be given to our
program so it can find the data it´s trying to operate on.

Example of different memory segments include code, initialization data, stack and heap.

The code and data sections will specify their intended map location in the section 
grouping.

Each memory segment also provides starting location and length of memory that our 
program data can be installed into.

The total number of memory segments must be equal to or larger than in size than what
the total compiled code and data sections add up to , otherwise we will have errors at installation.

Each memory segment provides access permisions for read and write operations of memory
blocks.

Code memory has only read permission while SRAM where data section is present has read an write permissions.


Through GNU Make we perform all operations of: preprocessing,
                                               assembling
                                               compiling,
                                               linking,
                                               relocating.  

Make enables us to do build management and automation software providing a simple and consistent method for producing a target executable.

Make is not a part of GCC but provided by GNU.
  
GNU Make controls execution of executables and other no source files of a program 
from the program´s source files.
              
Many multiple rules can be executed for any given instance of make that is run.
 We need to specify the target that we wish to execute when invoking make i.e.

    make main.o
    make all 
    make clean 

make command in terminal will build the defaults target in the makefile.

Most software teams do not use IDE autogenerated build systems but create of their own
to work over a variety of architectures of their own design.

In some cases we use shell scripts in linux to automate the buld process just like we 
do with make. 

We can version control our makefiles and update our build process over time as our
source code changes allowing us to record in our repo history exactly what we built with our software projects at any particular command. We don´t need to keep our build
output files in the repo because we have the source and make files required to create them.

We can give any name to our makefile as long as we pass the file into make. However 
make looks for these default files and names during invokation i.e. 

makefile , Makefile , sources.mk, includes.mk,......

In make build system the rule that is required to be followed is,
target : preequisites and commands.


target : prequisite 1 prequisite 2  prequisite 3....
         command 1
         command 2
         ....

Where the prequisites above are dependencies and commands are rules , this entire set
is called a recipe and a recipe can only execute if dependencies are met.


------Makefile Syntax--------

We will need to document our make file at top using comments.

Makefile comments start with a # unlike // or /* in c files .
Makefiles can also include other make files using 
include.
Line continuation in makefile is done by backward slash \ similar to it´s use of macro.
We can create and use variables.
Command lines start with a tab indent .
Targets can depend on ohter targets.

----Makefile Variables--------

Varaibles can be set to strings of text and can include other variables.
  Variable access is done with $(variable-name) syntax.

Two types of variables we use in our make files are : 
Recursively expanded variables defined with =
   These variables wherever they are used similar to
    macors

Simply expanded variables defined with :=  
  Expands once at the time of definition for e.g. : - 

We use variables like for compiler flags we use CFLAGS and
for linker flags we use LDFLAGS

    ARCH := $(shell arch)   
    CWD := $(shell pwd)
    OS  := $(shell uname) 
CFLAGS = -g -std = $(CSTD) -mcpu = $(CPU) -mthumb        Note : Where -mthumb points to target ISA of thumb which is a 16 Bit ISA in ARM and increasing code density in code/flash memory. 

We can use variables such as INCLUDES and SRCS that point
to our source files and include files such as follwos where includes provide path to code (absolute or relative paths) and sources determine what needs to be built.

INCLUDES =    \            SRCS =       \
    -I./libs  \              ./main.c   \
    -I./modem \              ./memory.c \ 
    -I./uart  \              ./uart.c   \
    -I./arch                 ./data.c   \


------------Automatic Variables---------

In makefiles we also have automatic variables for reducing
amount of typing for a particular rule they are $@ for "Target" and $^ for all preeqisites i.e 

Without Using Automatic Variables : 
$(TARGET) : $(OBJS)
   $(CC) $(CFLAGS) $(INCLUDES) $(ldflags) -O $(TARGET) $(OBJS)


After using Automatic variables our rule becomes short to as follows :
§(TARGET) : $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

-----------Pattern Matching------------

Make allows us to use variables for defining a build rule
without repeatedly using the same commands instead we just use variables similar to C Programming. 

However if we have multiple source and include files then we will need to define two variables one for source and one for object files and we will also need to track changes in our prequisites or dependecies for each target leading to generation of separate individual targets.

To resolve this issue make provides us pattern matching opertor % enabling us to match every source file with relevant object file i.e. 

%.o : %.c
      $(CC) -C $@ -o $< $(CFLAGS)  , Where $< Prequisite Name, $@ Target Rule Name

So we don´t need to mention the names of src and target files like we did previously as : 
main .o : main.c
          $(CC) -C main.c -o main.o $(CFLAGS)   where CC and CFLAGS are recrursively expanded variables. 

To further improve upon we can have variables OBJS for all object files and SRCS for src files using pattern matching thus all src files are mapped to object files i.e.

             OBJS := $(SRCS:.c=.o)      --------> This line is associating every .c src file with .o object files
                       SRCS : = main.c      \
                              my_file.c   \
                              my_memory.c \

                       OBJS : = main.o      \
                              my_file.o   \
                              my_memory.o      

-----------Target Suggestions---------------

If we don´t want to generate a certain executable instead we want to generate all files i.e. object files , final executables then we use make all command 
but to do that we need to use a make directive .PHONY which specifies make what to do 

.PHONY : all
all : main.out
main.out = $(OBJS)
         gcc $(CFLAGS) -o main.out $(OBJS)


.PHONY : clean
clean : 
      rm main.map $(OBJS) main.out

some make suggested targets besides final executable can be : all -----builds final exectable
                                                              clean----removes all generated object files or else as specified according to the recipe. 
                                                              debug----builds a debug image with debug symbols enabled.

-----------Function and dynamic variables------------------

We can have make file supporting multiple architectures that we can do by using make functions such as shell  functions $(shell arch) for architecture, $(shell pwd) for present working directory, $(shell uname) and then use if statements similar to preprocessor directives in src files i.e.

ARCH := $(shell arch)
CWD  := $(shell pwd) 
OS   := $(shell uname)

ifeq($(OS),Linux)
   CC = gcc
endif

So we can use specific compilers and flags for specific architecture.

Furthermore we can also pass input parameters to alter build defining specific feature (ARCHITECTURE,CPU,BOARD/PLATFORM,Compiler instance,
Compiler/Linker Options) just like we pass macro definition at compile time with gcc i.e. 

make all PLATFORM = msp432
male all CPU = cortex-m4
make all ARCH = arm

then we use ifeq statement just like ifdef directive i.e.

ifeq ($(PLATFORM),MSP)
  CPU = cortex-m4
endif

ifeq ($(PLATFORM),FRDM)
  CPU = cortex-m0plus
endif

-------Useful GNU Bin Tools------------

There are different GNU tools besides compiler, linker, assembler and GNU make but there are other tools which GNU offers known as GNU Bin utilities which are compiled and in executable form and can be used. They are such as : 

Assembler and linker are part of GNU Bin Utilities, Other GNU Bin utilities that we can make use of are : 

size : listing section sizes for object and executable files     arm-none-eabi-size
nm : listing the symbols from object files.                      arm-none-eabi-nm
objcopy : copies and translates object files.                arm-none-eabi-objcopy
objdump : displays information from object files             arm-none-eabi-objdump      
readelf : displays information from elf files.               arm-none-eabi-readelf
gdb : GNU projet debugger                                                      gdb




-------------------------------------------------------------------------Week 3-----------------------------------------------------------------------


-----------Memory Architectures, Memory Segments-------------------


Application Binary Interface (ABI) provides architecture specific details to compiler/Software Programmer.

Architecture families like ARM Cortex M4 have different chipsets from different vendors with varying Memory Size(RAM,ROM),I/O Pins, and peripheral interfaces(SPI,I2C,UART).

All the code , Data, Peripherals, Device, System Interfaces are present in one unified address space.

Register definistion files provides details on platform specific registers and can be put in C source files called (Register Definition files). This file actually contains
addresses of all the peripherals and thus we can access these peripherals by using their addresses.

Linker files provides information to locator how an executable is going to be installed, mapped in physical system in short it´s a layout. 

Typical Code Memory Sub Segments are : .intvecs (Segment containing addresses for interrupt vectors)
                                       .text    (Segment Containing text typed in program code)
                                       .const   (Segment containing constants)
                                       .pinint  (Segment containing program initialization data i.e. initialization values for variables)
                                       .cinit   (Segment containing program initialization data i.e. initialization values for variables)

Typical Data Memory Sub segments are : .data    (Segment containing Non-Zero Initialized Global and Static Variables)  
                                       .bss     (Segment containing Zero Initialized and Uninitialized global and static Variables)
                                       .heap    (Segment containing Heap memory contents, data this memory is managed by programmer) 
                                       .stack   (Segment containing stack variables, data such as local function variables)     

--------------------------Data Memory--------------------------------

There are three main types of memories available to us inside a microcontroller they are : 

Flash     ( Non Volatile Memory)
RAM       ( Volatile Memory )
Registers ( Volatile Memory )


Data Memory store our program operands and it´s the RAM of microcontroller or processor. RAM is classified into SRAM(static RAM) and DRAM(Dynamic RAM).

SRAM contents last as long as the power is delivered.
DRAM needs to be refreshed 


Data in the Data memory can be allocated at compile time i.e. 
(function static variables,.bss sub segment variables,.data sub segment variables)  and at run time( function local variables).

In data memory we have data segment which is a container for various types of data allocated on it . Following are four main sub segments inside data memory containerized by data segment and they are : 

Stack :                                 Stores temporary Data storage i.e. local variables
Heap :                                  Dynamic Data Storage, Managed By Programmer.

Data :                                  Non-Zero Initialized Static Local, Global  Data Variables.
                                        Sub Segment has Static Local and Static Global  Variables/ Data  initialized to Non Zero Value. 
                                        Sub Segment has Global Non Static Variables/ Data initialized to Non Zero Value.


BSS(Block Started By Symbol) :          Zero Initialized and Uninitialized Local,global and Static data,Variables.  
                                        Sub Segment has Static Local and Static Global  Variables/ Data initialized to 0 or not initialized at all. 
                                        Sub Segment has Global Non Static Variables/ Data initialized to 0 or not initialized at all.

Example : 
int A_BSS;
int B_BSS = 0;
void  foo(int D_STACK_REG) {
int E_STACK_REG;
int F_STACK_REG =1;
static int G_BSS;
static int H_BSS = 0;       
static int I_DATA = 1;    

}


The data allocated in data segment can have have varying : Size, Access , Scope, Location, Creation time ,Lifetime.
Data segment data properties (Size, Access , Scope, Location, Creation time ,Lifetime) are specified by C/C++ : 
variable types(uint8_t,int,float,double e.t.c), type qualifiers(const,volatile,restrict), Type Modifiers,storage classes(auto,register,static,extern), 
Compiler attributes (pragma pack(1) e.t.c ), Specialized functions. 


------Variable Lifetime and Scope-----------


Data in the data memory exist for different lenghts of time i.e.
During Lifetime of function or block.            ( Function or block Local Variables except local static variables).
During entire lifetime of program.               ( Global Variables)
Longer than a function but less than a program.  ( Heap Memory).

Global Variables exist for length of the program and are allocated at compile time. Memory for global variable can be allocated in linker file.

Static variable local to a function will retain it´s content even when they are returned from the function where they are decalred in. So it´s life is more than 
of function where it´s declared.  


---------------Special Keywords (Const,extern,static)-------------------------

Special keywords that can affect data allocation in code and data segment of memory are classified into : 
Variable types :
Type Qualifiers : const,restrict,volatile.
Type Modifiers : Type modifiers modify the size and sign of data type.
Storage Classes : auto, static, register, extern. The storage classes define lifetime and scope of data type related to a variable.

Static storage class data will persist in memory until end of program, static data is either stored in .bss or .data sub segments of data segment/memory depending upon their initialization value as if it´s non zero then it goes in data and if it´s zero initialized then it goes in .bss sub segment. 

Extern Storage Class Variables will last during entire lifetime of program and can reside either in .bss or .data sub segments of data memory/segment depending upon their initialization value. 

const type qualifier data is read only and is stored in .const or .rodata sub segment of code memory.

Linker file outlines memory segments as data allocation is not only done at compile time but also at run time.

Code Memory is also used for storing constants and initialization values of variables.

Example : Data Segment

int A_BSS;
int B_BSS = 0;
int C_DATA = 1;
const int D_RODATA = 1;

void foo(int D_STACK_REG) {
int F_STACK_REG;
int G_STACK_REG = 1;
static int H_BSS;
static int I_BSS = 0;
static int J_DATA = 1;
char * ptr_STACK_REG;
ptr_STACK_REG = (char*)malloc(8);

free ((void*)ptr_STACK_REG);
return;
}

The BSS or .bss and DATA or .data sub segments of data segment or memory get´s data allocated at compile time and then it exists during entire lifetime of a program.


-----------------The Stack-------------------

Stack space is reserved at compile time then data gets allocated at run time.
Stack is primarily used for tracking the state of a program as different functions, interrupts are call´d more specifically during context switching for saving the current program counter value and current function variable during the context switching.

Calling convention describes a method of how data is passed in and returned from a routine.


Stack implementation is architecture dependent , Typical stack data includes : 
Previous stack info  
Return value 
Input parameters 
Return address 
Stack Pointer/Frame Pointer
Local Variables.
Saved Registers.
Unused Stack Space.
Special function registers.

Every function or called routine has it´s own stack frame,  these stack frames are part of stack and they are create.
Each new stack frame has data dependent on the implementation of function and current state of CPU as soon as functions are returned , stack frame data get´s removed.

Stack pointer points to end of used stack.
Stack frame pointer(FP) points to begining of stack frame(previous SP)
Stack either grows upwards or downwards normally it grow downwards.



----------------The Heap------------------

Heap Space is a sub segment of data memory that is reserved at compile time with a set size however heap can be resized during run time by programmer.



----Heap Lifetime and Scope------

Heap data can have a lifetime longer than a function but less than the program.
Heap data can have a local scope or global scope.
Heap Memory allocation/deallocation adds execution overhead.


--------Heap Functions For Allocating/Deallocating Data-----------

void *malloc(size_t size);                      // Assigns contigous block of 
void *calloc(size_t nitems,size_t item_size);   // same as malloc except initializes heap section with zeros unnlike malloc
void *realloc(void *ptr,size_t size);           // Resize existing heap memory region either by allocating adjusting memory or by assigning another memory section.
                                                // It may move existing heap space to new memory region and free old space of memory occupied in previous allocation.
void free(void *ptr);





malloc, calloc, realloc  : Returns a void pointer pointing to the begining of heap memory region. This void pointer can be casted easily to the data type which we want to store in heap.
                           Returns NULL pointer if heap memory allocation fails could be because of fragmentation.


           Note : If we´ve a local pointer containing allocated heap memory address afterwards when exit this block of code where local pointer resides and don´t free heap memory using
                  free() function then we loose access to heap as local pointer won´t be existing outside of function or block moreover this portion of memory won´t be utilizable by 
                  other sections of program. So a better approach will be to make this pointer as static or const.   



---------------------------The Code Memory---------------------

As we know there are three main types of memory : Flash Memory (Non Volatile) , RAM (Volatile) , CPU Registers(Volatile)

Instructions are fetched from code memory , decoded and then executed in the microcontrollers CPU.

The code Memory/Segment represents the part of compiled memory containing all of our executable program.

Code Memory is Run time Read Only Non Volatile Memory (Flash)
Code Memory stores instructions and some data.
Code Memory can be run time rewritable but it will require extra credetials offering better security and protection from overwriting.


Code Memory sub segments are :       .intvecs   ,   .text ,    .const,   .cinit,   .pinit ,   bootloader.
 
Size of all code memory sub segments depend upon architecture or implementation ( Architecture, Compiler e.t.c).

.text :           Code memory sub segment text contains all of our written software including our main thread, user defined functions, interrupt service routines, standard library code.
                  Text section or sub segment is the largest segment in code including ( main function, Userdefine functions, Interrupt routines, Standard Library Code).

.intvecs :        It´s a interrupt vector table containing addresses of interrupt handlers/routines.

.rodata/.const :  Contains variables declared with const type qualifier. This is read only segment of code memory any write operation during run time will cause segmentation fault or
                  exception. 

.pinit,.cinit :   Code Memory Sub segments containing initializing data and variable values.
                  Sub segments provides initialization values to data memory (.data,.bss to 0 ) on each startup so it´s a double hit on overhead . 

Sometimes instead of .cinit and .pinit we may also found names like : 

.init/.fini 
.init_array
.ctors/.dtors 
 
Above are all a mixture of initialization functions and initialization data.


Bootloader : Code Memory Sub segment containing small block of code for updating code memory with a new firmware.
             Allows us to check for a new install of firmware. 
             Helps with reducing costs instead of external flasher. 
             We can also create section in linker script for bootloader code.
             Bootloader will check for a signal on a I/O (I2C,SPI,USB) if it´s present then it will update our firmware from the code provided by the I/O interface , if no signal detected 
             then it´s boots program code normally.

Standard library code is automatically linked by compiler.










           

  
